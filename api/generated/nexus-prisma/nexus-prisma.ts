/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      User: UserObject
      Item: ItemObject
      UserConnection: UserConnectionObject
      PageInfo: PageInfoObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      ItemConnection: ItemConnectionObject
      ItemEdge: ItemEdgeObject
      AggregateItem: AggregateItemObject
      Event: EventObject
      EventConnection: EventConnectionObject
      EventEdge: EventEdgeObject
      AggregateEvent: AggregateEventObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      ItemSubscriptionPayload: ItemSubscriptionPayloadObject
      ItemPreviousValues: ItemPreviousValuesObject
      EventSubscriptionPayload: EventSubscriptionPayloadObject
      EventPreviousValues: EventPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      User: UserFieldDetails
      Item: ItemFieldDetails
      UserConnection: UserConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      ItemConnection: ItemConnectionFieldDetails
      ItemEdge: ItemEdgeFieldDetails
      AggregateItem: AggregateItemFieldDetails
      Event: EventFieldDetails
      EventConnection: EventConnectionFieldDetails
      EventEdge: EventEdgeFieldDetails
      AggregateEvent: AggregateEventFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      ItemSubscriptionPayload: ItemSubscriptionPayloadFieldDetails
      ItemPreviousValues: ItemPreviousValuesFieldDetails
      EventSubscriptionPayload: EventSubscriptionPayloadFieldDetails
      EventPreviousValues: EventPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      ItemWhereInput: ItemWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      ItemWhereUniqueInput: ItemWhereUniqueInputInputObject
      EventWhereUniqueInput: EventWhereUniqueInputInputObject
      EventWhereInput: EventWhereInputInputObject
      UserCreateInput: UserCreateInputInputObject
      ItemCreateManyWithoutCreatorInput: ItemCreateManyWithoutCreatorInputInputObject
      ItemCreateWithoutCreatorInput: ItemCreateWithoutCreatorInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      ItemUpdateManyWithoutCreatorInput: ItemUpdateManyWithoutCreatorInputInputObject
      ItemUpdateWithWhereUniqueWithoutCreatorInput: ItemUpdateWithWhereUniqueWithoutCreatorInputInputObject
      ItemUpdateWithoutCreatorDataInput: ItemUpdateWithoutCreatorDataInputInputObject
      ItemUpsertWithWhereUniqueWithoutCreatorInput: ItemUpsertWithWhereUniqueWithoutCreatorInputInputObject
      ItemScalarWhereInput: ItemScalarWhereInputInputObject
      ItemUpdateManyWithWhereNestedInput: ItemUpdateManyWithWhereNestedInputInputObject
      ItemUpdateManyDataInput: ItemUpdateManyDataInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      ItemCreateInput: ItemCreateInputInputObject
      UserCreateOneWithoutItemsInput: UserCreateOneWithoutItemsInputInputObject
      UserCreateWithoutItemsInput: UserCreateWithoutItemsInputInputObject
      ItemUpdateInput: ItemUpdateInputInputObject
      UserUpdateOneWithoutItemsInput: UserUpdateOneWithoutItemsInputInputObject
      UserUpdateWithoutItemsDataInput: UserUpdateWithoutItemsDataInputInputObject
      UserUpsertWithoutItemsInput: UserUpsertWithoutItemsInputInputObject
      ItemUpdateManyMutationInput: ItemUpdateManyMutationInputInputObject
      EventCreateInput: EventCreateInputInputObject
      ItemCreateOneInput: ItemCreateOneInputInputObject
      UserCreateOneInput: UserCreateOneInputInputObject
      EventUpdateInput: EventUpdateInputInputObject
      ItemUpdateOneRequiredInput: ItemUpdateOneRequiredInputInputObject
      ItemUpdateDataInput: ItemUpdateDataInputInputObject
      ItemUpsertNestedInput: ItemUpsertNestedInputInputObject
      UserUpdateOneInput: UserUpdateOneInputInputObject
      UserUpdateDataInput: UserUpdateDataInputInputObject
      UserUpsertNestedInput: UserUpsertNestedInputInputObject
      EventUpdateManyMutationInput: EventUpdateManyMutationInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      ItemSubscriptionWhereInput: ItemSubscriptionWhereInputInputObject
      EventSubscriptionWhereInput: EventSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    ItemOrderByInput: ItemOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    EventOrderByInput: EventOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'item', args?: QueryItemArgs[] | false, alias?: string  } 
  | { name: 'items', args?: QueryItemsArgs[] | false, alias?: string  } 
  | { name: 'itemsConnection', args?: QueryItemsConnectionArgs[] | false, alias?: string  } 
  | { name: 'event', args?: QueryEventArgs[] | false, alias?: string  } 
  | { name: 'events', args?: QueryEventsArgs[] | false, alias?: string  } 
  | { name: 'eventsConnection', args?: QueryEventsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'item'
  | 'items'
  | 'itemsConnection'
  | 'event'
  | 'events'
  | 'eventsConnection'


type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryItemArgs =
  | 'where'
type QueryItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryItemsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEventArgs =
  | 'where'
type QueryEventsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEventsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  item: {
    type: 'Item'
    args: Record<QueryItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item | null> | prisma.Item | null
  }
  items: {
    type: 'Item'
    args: Record<QueryItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ItemWhereInput | null, orderBy?: prisma.ItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item[]> | prisma.Item[]
  }
  itemsConnection: {
    type: 'ItemConnection'
    args: Record<QueryItemsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ItemWhereInput | null, orderBy?: prisma.ItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ItemConnection> | prisma.ItemConnection
  }
  event: {
    type: 'Event'
    args: Record<QueryEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EventWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event | null> | prisma.Event | null
  }
  events: {
    type: 'Event'
    args: Record<QueryEventsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EventWhereInput | null, orderBy?: prisma.EventOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event[]> | prisma.Event[]
  }
  eventsConnection: {
    type: 'EventConnection'
    args: Record<QueryEventsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EventWhereInput | null, orderBy?: prisma.EventOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EventConnection> | prisma.EventConnection
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 
  | { name: 'points', args?: [] | false, alias?: string  } 
  | { name: 'items', args?: UserItemsArgs[] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'username'
  | 'points'
  | 'items'


type UserItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  points: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  items: {
    type: 'Item'
    args: Record<UserItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: ItemWhereInput | null, orderBy?: prisma.ItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item[]> | prisma.Item[]
  }
}
  

// Types for Item

type ItemObject =
  | ItemFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'multiplier', args?: [] | false, alias?: string  } 
  | { name: 'creator', args?: [] | false, alias?: string  } 

type ItemFields =
  | 'id'
  | 'name'
  | 'multiplier'
  | 'creator'



  

export interface ItemFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  multiplier: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  creator: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Item">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ItemConnection

type ItemConnectionObject =
  | ItemConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ItemConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ItemConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ItemEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ItemEdge[]> | prisma.ItemEdge[]
  }
  aggregate: {
    type: 'AggregateItem'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateItem> | prisma.AggregateItem
  }
}
  

// Types for ItemEdge

type ItemEdgeObject =
  | ItemEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ItemEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ItemEdgeFieldDetails {
  node: {
    type: 'Item'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ItemEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item> | prisma.Item
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateItem

type AggregateItemObject =
  | AggregateItemFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateItemFields =
  | 'count'



  

export interface AggregateItemFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Event

type EventObject =
  | EventFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'item', args?: [] | false, alias?: string  } 
  | { name: 'duration', args?: [] | false, alias?: string  } 
  | { name: 'value', args?: [] | false, alias?: string  } 
  | { name: 'creator', args?: [] | false, alias?: string  } 

type EventFields =
  | 'id'
  | 'item'
  | 'duration'
  | 'value'
  | 'creator'



  

export interface EventFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  item: {
    type: 'Item'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Event">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item> | prisma.Item
  }
  duration: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  value: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  creator: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Event">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
}
  

// Types for EventConnection

type EventConnectionObject =
  | EventConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EventConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EventConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EventConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EventEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EventConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EventEdge[]> | prisma.EventEdge[]
  }
  aggregate: {
    type: 'AggregateEvent'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EventConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEvent> | prisma.AggregateEvent
  }
}
  

// Types for EventEdge

type EventEdgeObject =
  | EventEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EventEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EventEdgeFieldDetails {
  node: {
    type: 'Event'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EventEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event> | prisma.Event
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEvent

type AggregateEventObject =
  | AggregateEventFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEventFields =
  | 'count'



  

export interface AggregateEventFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createItem', args?: MutationCreateItemArgs[] | false, alias?: string  } 
  | { name: 'updateItem', args?: MutationUpdateItemArgs[] | false, alias?: string  } 
  | { name: 'updateManyItems', args?: MutationUpdateManyItemsArgs[] | false, alias?: string  } 
  | { name: 'upsertItem', args?: MutationUpsertItemArgs[] | false, alias?: string  } 
  | { name: 'deleteItem', args?: MutationDeleteItemArgs[] | false, alias?: string  } 
  | { name: 'deleteManyItems', args?: MutationDeleteManyItemsArgs[] | false, alias?: string  } 
  | { name: 'createEvent', args?: MutationCreateEventArgs[] | false, alias?: string  } 
  | { name: 'updateEvent', args?: MutationUpdateEventArgs[] | false, alias?: string  } 
  | { name: 'updateManyEvents', args?: MutationUpdateManyEventsArgs[] | false, alias?: string  } 
  | { name: 'upsertEvent', args?: MutationUpsertEventArgs[] | false, alias?: string  } 
  | { name: 'deleteEvent', args?: MutationDeleteEventArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEvents', args?: MutationDeleteManyEventsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createItem'
  | 'updateItem'
  | 'updateManyItems'
  | 'upsertItem'
  | 'deleteItem'
  | 'deleteManyItems'
  | 'createEvent'
  | 'updateEvent'
  | 'updateManyEvents'
  | 'upsertEvent'
  | 'deleteEvent'
  | 'deleteManyEvents'


type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateItemArgs =
  | 'data'
type MutationUpdateItemArgs =
  | 'data'
  | 'where'
type MutationUpdateManyItemsArgs =
  | 'data'
  | 'where'
type MutationUpsertItemArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteItemArgs =
  | 'where'
type MutationDeleteManyItemsArgs =
  | 'where'
type MutationCreateEventArgs =
  | 'data'
type MutationUpdateEventArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEventsArgs =
  | 'data'
  | 'where'
type MutationUpsertEventArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEventArgs =
  | 'where'
type MutationDeleteManyEventsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createItem: {
    type: 'Item'
    args: Record<MutationCreateItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ItemCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item> | prisma.Item
  }
  updateItem: {
    type: 'Item'
    args: Record<MutationUpdateItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ItemUpdateInput, where: ItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item | null> | prisma.Item | null
  }
  updateManyItems: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ItemUpdateManyMutationInput, where?: ItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertItem: {
    type: 'Item'
    args: Record<MutationUpsertItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ItemWhereUniqueInput, create: ItemCreateInput, update: ItemUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item> | prisma.Item
  }
  deleteItem: {
    type: 'Item'
    args: Record<MutationDeleteItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item | null> | prisma.Item | null
  }
  deleteManyItems: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createEvent: {
    type: 'Event'
    args: Record<MutationCreateEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EventCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event> | prisma.Event
  }
  updateEvent: {
    type: 'Event'
    args: Record<MutationUpdateEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EventUpdateInput, where: EventWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event | null> | prisma.Event | null
  }
  updateManyEvents: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEventsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EventUpdateManyMutationInput, where?: EventWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEvent: {
    type: 'Event'
    args: Record<MutationUpsertEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EventWhereUniqueInput, create: EventCreateInput, update: EventUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event> | prisma.Event
  }
  deleteEvent: {
    type: 'Event'
    args: Record<MutationDeleteEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EventWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event | null> | prisma.Event | null
  }
  deleteManyEvents: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEventsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EventWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'item', args?: SubscriptionItemArgs[] | false, alias?: string  } 
  | { name: 'event', args?: SubscriptionEventArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'user'
  | 'item'
  | 'event'


type SubscriptionUserArgs =
  | 'where'
type SubscriptionItemArgs =
  | 'where'
type SubscriptionEventArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  item: {
    type: 'ItemSubscriptionPayload'
    args: Record<SubscriptionItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ItemSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ItemSubscriptionPayload | null> | prisma.ItemSubscriptionPayload | null
  }
  event: {
    type: 'EventSubscriptionPayload'
    args: Record<SubscriptionEventArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EventSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EventSubscriptionPayload | null> | prisma.EventSubscriptionPayload | null
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'username', args?: [] | false, alias?: string  } 
  | { name: 'points', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'username'
  | 'points'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  username: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  points: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for ItemSubscriptionPayload

type ItemSubscriptionPayloadObject =
  | ItemSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ItemSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ItemSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Item'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Item | null> | prisma.Item | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ItemPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ItemPreviousValues | null> | prisma.ItemPreviousValues | null
  }
}
  

// Types for ItemPreviousValues

type ItemPreviousValuesObject =
  | ItemPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'multiplier', args?: [] | false, alias?: string  } 

type ItemPreviousValuesFields =
  | 'id'
  | 'name'
  | 'multiplier'



  

export interface ItemPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  multiplier: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EventSubscriptionPayload

type EventSubscriptionPayloadObject =
  | EventSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EventSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EventSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EventSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Event'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EventSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Event | null> | prisma.Event | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EventPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EventSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EventPreviousValues | null> | prisma.EventPreviousValues | null
  }
}
  

// Types for EventPreviousValues

type EventPreviousValuesObject =
  | EventPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'duration', args?: [] | false, alias?: string  } 
  | { name: 'value', args?: [] | false, alias?: string  } 

type EventPreviousValuesFields =
  | 'id'
  | 'duration'
  | 'value'



  

export interface EventPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  duration: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  value: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface UserWhereUniqueInput {
  id?: string | null
  username?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'username', alias?: string  } 
  
export interface ItemWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  multiplier?: number | null
  multiplier_not?: number | null
  multiplier_in?: number[]
  multiplier_not_in?: number[]
  multiplier_lt?: number | null
  multiplier_lte?: number | null
  multiplier_gt?: number | null
  multiplier_gte?: number | null
  creator?: UserWhereInput | null
  AND?: ItemWhereInput[]
  OR?: ItemWhereInput[]
  NOT?: ItemWhereInput[]
}
export type ItemWhereInputInputObject =
  | Extract<keyof ItemWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'multiplier', alias?: string  } 
  | { name: 'multiplier_not', alias?: string  } 
  | { name: 'multiplier_in', alias?: string  } 
  | { name: 'multiplier_not_in', alias?: string  } 
  | { name: 'multiplier_lt', alias?: string  } 
  | { name: 'multiplier_lte', alias?: string  } 
  | { name: 'multiplier_gt', alias?: string  } 
  | { name: 'multiplier_gte', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  username?: string | null
  username_not?: string | null
  username_in?: string[]
  username_not_in?: string[]
  username_lt?: string | null
  username_lte?: string | null
  username_gt?: string | null
  username_gte?: string | null
  username_contains?: string | null
  username_not_contains?: string | null
  username_starts_with?: string | null
  username_not_starts_with?: string | null
  username_ends_with?: string | null
  username_not_ends_with?: string | null
  points?: number | null
  points_not?: number | null
  points_in?: number[]
  points_not_in?: number[]
  points_lt?: number | null
  points_lte?: number | null
  points_gt?: number | null
  points_gte?: number | null
  items_every?: ItemWhereInput | null
  items_some?: ItemWhereInput | null
  items_none?: ItemWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'username_not', alias?: string  } 
  | { name: 'username_in', alias?: string  } 
  | { name: 'username_not_in', alias?: string  } 
  | { name: 'username_lt', alias?: string  } 
  | { name: 'username_lte', alias?: string  } 
  | { name: 'username_gt', alias?: string  } 
  | { name: 'username_gte', alias?: string  } 
  | { name: 'username_contains', alias?: string  } 
  | { name: 'username_not_contains', alias?: string  } 
  | { name: 'username_starts_with', alias?: string  } 
  | { name: 'username_not_starts_with', alias?: string  } 
  | { name: 'username_ends_with', alias?: string  } 
  | { name: 'username_not_ends_with', alias?: string  } 
  | { name: 'points', alias?: string  } 
  | { name: 'points_not', alias?: string  } 
  | { name: 'points_in', alias?: string  } 
  | { name: 'points_not_in', alias?: string  } 
  | { name: 'points_lt', alias?: string  } 
  | { name: 'points_lte', alias?: string  } 
  | { name: 'points_gt', alias?: string  } 
  | { name: 'points_gte', alias?: string  } 
  | { name: 'items_every', alias?: string  } 
  | { name: 'items_some', alias?: string  } 
  | { name: 'items_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ItemWhereUniqueInput {
  id?: string | null
}
export type ItemWhereUniqueInputInputObject =
  | Extract<keyof ItemWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface EventWhereUniqueInput {
  id?: string | null
}
export type EventWhereUniqueInputInputObject =
  | Extract<keyof EventWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface EventWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  item?: ItemWhereInput | null
  duration?: number | null
  duration_not?: number | null
  duration_in?: number[]
  duration_not_in?: number[]
  duration_lt?: number | null
  duration_lte?: number | null
  duration_gt?: number | null
  duration_gte?: number | null
  value?: number | null
  value_not?: number | null
  value_in?: number[]
  value_not_in?: number[]
  value_lt?: number | null
  value_lte?: number | null
  value_gt?: number | null
  value_gte?: number | null
  creator?: UserWhereInput | null
  AND?: EventWhereInput[]
  OR?: EventWhereInput[]
  NOT?: EventWhereInput[]
}
export type EventWhereInputInputObject =
  | Extract<keyof EventWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'item', alias?: string  } 
  | { name: 'duration', alias?: string  } 
  | { name: 'duration_not', alias?: string  } 
  | { name: 'duration_in', alias?: string  } 
  | { name: 'duration_not_in', alias?: string  } 
  | { name: 'duration_lt', alias?: string  } 
  | { name: 'duration_lte', alias?: string  } 
  | { name: 'duration_gt', alias?: string  } 
  | { name: 'duration_gte', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'value_not', alias?: string  } 
  | { name: 'value_in', alias?: string  } 
  | { name: 'value_not_in', alias?: string  } 
  | { name: 'value_lt', alias?: string  } 
  | { name: 'value_lte', alias?: string  } 
  | { name: 'value_gt', alias?: string  } 
  | { name: 'value_gte', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  username?: string
  points?: number | null
  items?: ItemCreateManyWithoutCreatorInput | null
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'points', alias?: string  } 
  | { name: 'items', alias?: string  } 
  
export interface ItemCreateManyWithoutCreatorInput {
  create?: ItemCreateWithoutCreatorInput[]
  connect?: ItemWhereUniqueInput[]
}
export type ItemCreateManyWithoutCreatorInputInputObject =
  | Extract<keyof ItemCreateManyWithoutCreatorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ItemCreateWithoutCreatorInput {
  id?: string | null
  name?: string
  multiplier?: number
}
export type ItemCreateWithoutCreatorInputInputObject =
  | Extract<keyof ItemCreateWithoutCreatorInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'multiplier', alias?: string  } 
  
export interface UserUpdateInput {
  username?: string | null
  points?: number | null
  items?: ItemUpdateManyWithoutCreatorInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'points', alias?: string  } 
  | { name: 'items', alias?: string  } 
  
export interface ItemUpdateManyWithoutCreatorInput {
  create?: ItemCreateWithoutCreatorInput[]
  delete?: ItemWhereUniqueInput[]
  connect?: ItemWhereUniqueInput[]
  set?: ItemWhereUniqueInput[]
  disconnect?: ItemWhereUniqueInput[]
  update?: ItemUpdateWithWhereUniqueWithoutCreatorInput[]
  upsert?: ItemUpsertWithWhereUniqueWithoutCreatorInput[]
  deleteMany?: ItemScalarWhereInput[]
  updateMany?: ItemUpdateManyWithWhereNestedInput[]
}
export type ItemUpdateManyWithoutCreatorInputInputObject =
  | Extract<keyof ItemUpdateManyWithoutCreatorInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface ItemUpdateWithWhereUniqueWithoutCreatorInput {
  where?: ItemWhereUniqueInput
  data?: ItemUpdateWithoutCreatorDataInput
}
export type ItemUpdateWithWhereUniqueWithoutCreatorInputInputObject =
  | Extract<keyof ItemUpdateWithWhereUniqueWithoutCreatorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ItemUpdateWithoutCreatorDataInput {
  name?: string | null
  multiplier?: number | null
}
export type ItemUpdateWithoutCreatorDataInputInputObject =
  | Extract<keyof ItemUpdateWithoutCreatorDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'multiplier', alias?: string  } 
  
export interface ItemUpsertWithWhereUniqueWithoutCreatorInput {
  where?: ItemWhereUniqueInput
  update?: ItemUpdateWithoutCreatorDataInput
  create?: ItemCreateWithoutCreatorInput
}
export type ItemUpsertWithWhereUniqueWithoutCreatorInputInputObject =
  | Extract<keyof ItemUpsertWithWhereUniqueWithoutCreatorInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ItemScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  multiplier?: number | null
  multiplier_not?: number | null
  multiplier_in?: number[]
  multiplier_not_in?: number[]
  multiplier_lt?: number | null
  multiplier_lte?: number | null
  multiplier_gt?: number | null
  multiplier_gte?: number | null
  AND?: ItemScalarWhereInput[]
  OR?: ItemScalarWhereInput[]
  NOT?: ItemScalarWhereInput[]
}
export type ItemScalarWhereInputInputObject =
  | Extract<keyof ItemScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'multiplier', alias?: string  } 
  | { name: 'multiplier_not', alias?: string  } 
  | { name: 'multiplier_in', alias?: string  } 
  | { name: 'multiplier_not_in', alias?: string  } 
  | { name: 'multiplier_lt', alias?: string  } 
  | { name: 'multiplier_lte', alias?: string  } 
  | { name: 'multiplier_gt', alias?: string  } 
  | { name: 'multiplier_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ItemUpdateManyWithWhereNestedInput {
  where?: ItemScalarWhereInput
  data?: ItemUpdateManyDataInput
}
export type ItemUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof ItemUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface ItemUpdateManyDataInput {
  name?: string | null
  multiplier?: number | null
}
export type ItemUpdateManyDataInputInputObject =
  | Extract<keyof ItemUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'multiplier', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  username?: string | null
  points?: number | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'points', alias?: string  } 
  
export interface ItemCreateInput {
  id?: string | null
  name?: string
  multiplier?: number
  creator?: UserCreateOneWithoutItemsInput | null
}
export type ItemCreateInputInputObject =
  | Extract<keyof ItemCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'multiplier', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  
export interface UserCreateOneWithoutItemsInput {
  create?: UserCreateWithoutItemsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutItemsInputInputObject =
  | Extract<keyof UserCreateOneWithoutItemsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutItemsInput {
  id?: string | null
  username?: string
  points?: number | null
}
export type UserCreateWithoutItemsInputInputObject =
  | Extract<keyof UserCreateWithoutItemsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'username', alias?: string  } 
  | { name: 'points', alias?: string  } 
  
export interface ItemUpdateInput {
  name?: string | null
  multiplier?: number | null
  creator?: UserUpdateOneWithoutItemsInput | null
}
export type ItemUpdateInputInputObject =
  | Extract<keyof ItemUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'multiplier', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  
export interface UserUpdateOneWithoutItemsInput {
  create?: UserCreateWithoutItemsInput | null
  update?: UserUpdateWithoutItemsDataInput | null
  upsert?: UserUpsertWithoutItemsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutItemsInputInputObject =
  | Extract<keyof UserUpdateOneWithoutItemsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutItemsDataInput {
  username?: string | null
  points?: number | null
}
export type UserUpdateWithoutItemsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutItemsDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'points', alias?: string  } 
  
export interface UserUpsertWithoutItemsInput {
  update?: UserUpdateWithoutItemsDataInput
  create?: UserCreateWithoutItemsInput
}
export type UserUpsertWithoutItemsInputInputObject =
  | Extract<keyof UserUpsertWithoutItemsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface ItemUpdateManyMutationInput {
  name?: string | null
  multiplier?: number | null
}
export type ItemUpdateManyMutationInputInputObject =
  | Extract<keyof ItemUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'multiplier', alias?: string  } 
  
export interface EventCreateInput {
  id?: string | null
  item?: ItemCreateOneInput
  duration?: number
  value?: number
  creator?: UserCreateOneInput | null
}
export type EventCreateInputInputObject =
  | Extract<keyof EventCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'item', alias?: string  } 
  | { name: 'duration', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  
export interface ItemCreateOneInput {
  create?: ItemCreateInput | null
  connect?: ItemWhereUniqueInput | null
}
export type ItemCreateOneInputInputObject =
  | Extract<keyof ItemCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateOneInput {
  create?: UserCreateInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneInputInputObject =
  | Extract<keyof UserCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EventUpdateInput {
  item?: ItemUpdateOneRequiredInput | null
  duration?: number | null
  value?: number | null
  creator?: UserUpdateOneInput | null
}
export type EventUpdateInputInputObject =
  | Extract<keyof EventUpdateInput, string>
  | { name: 'item', alias?: string  } 
  | { name: 'duration', alias?: string  } 
  | { name: 'value', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  
export interface ItemUpdateOneRequiredInput {
  create?: ItemCreateInput | null
  update?: ItemUpdateDataInput | null
  upsert?: ItemUpsertNestedInput | null
  connect?: ItemWhereUniqueInput | null
}
export type ItemUpdateOneRequiredInputInputObject =
  | Extract<keyof ItemUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface ItemUpdateDataInput {
  name?: string | null
  multiplier?: number | null
  creator?: UserUpdateOneWithoutItemsInput | null
}
export type ItemUpdateDataInputInputObject =
  | Extract<keyof ItemUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'multiplier', alias?: string  } 
  | { name: 'creator', alias?: string  } 
  
export interface ItemUpsertNestedInput {
  update?: ItemUpdateDataInput
  create?: ItemCreateInput
}
export type ItemUpsertNestedInputInputObject =
  | Extract<keyof ItemUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpdateOneInput {
  create?: UserCreateInput | null
  update?: UserUpdateDataInput | null
  upsert?: UserUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneInputInputObject =
  | Extract<keyof UserUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateDataInput {
  username?: string | null
  points?: number | null
  items?: ItemUpdateManyWithoutCreatorInput | null
}
export type UserUpdateDataInputInputObject =
  | Extract<keyof UserUpdateDataInput, string>
  | { name: 'username', alias?: string  } 
  | { name: 'points', alias?: string  } 
  | { name: 'items', alias?: string  } 
  
export interface UserUpsertNestedInput {
  update?: UserUpdateDataInput
  create?: UserCreateInput
}
export type UserUpsertNestedInputInputObject =
  | Extract<keyof UserUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface EventUpdateManyMutationInput {
  duration?: number | null
  value?: number | null
}
export type EventUpdateManyMutationInputInputObject =
  | Extract<keyof EventUpdateManyMutationInput, string>
  | { name: 'duration', alias?: string  } 
  | { name: 'value', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ItemSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ItemWhereInput | null
  AND?: ItemSubscriptionWhereInput[]
  OR?: ItemSubscriptionWhereInput[]
  NOT?: ItemSubscriptionWhereInput[]
}
export type ItemSubscriptionWhereInputInputObject =
  | Extract<keyof ItemSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EventSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EventWhereInput | null
  AND?: EventSubscriptionWhereInput[]
  OR?: EventSubscriptionWhereInput[]
  NOT?: EventSubscriptionWhereInput[]
}
export type EventSubscriptionWhereInputInputObject =
  | Extract<keyof EventSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type ItemOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'multiplier_ASC'
  | 'multiplier_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'username_ASC'
  | 'username_DESC'
  | 'points_ASC'
  | 'points_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type EventOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'duration_ASC'
  | 'duration_DESC'
  | 'value_ASC'
  | 'value_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  